# Copyright (c) 2010-2011 Sean Voisen.

# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# THE SOFTWARE.

require 'parser/nodes'
require 'parser/objects'
require 'parser/lists'
require 'parser/control_flow'
require 'parser/functions'
require 'parser/events'
require 'parser/oop'

module Crayon
  module Parser

    grammar Crayon
      include Objects
      include ControlFlow
      include Functions
      include Events
      include Lists
      include OOP

      # Root node
      rule script
        newline* statement remaining_statements:(newline statement)* newline* <Script>
        {
          def statements
            [statement] + remaining_statements.elements.map{|s| s.statement}
          end
        }
      end

      # All possible statements in a script, multiline or single line
      rule statement
        comment / assignment / conditional / loop / function / event / call / method
      end

      # Single line statements used primarily for inline conditionals
      rule inline_statement
        "(" space? inline_statement space? ")"
        {
          def codegen(generator, terminate=false, parenthesize=false)
            inline_statement.codegen(generator, terminate, true)
          end
        }
        / assignment / event / value
      end

      # A portion of a statement that evaluates to a value (or null)
      rule expression
        value !(space? operator)
        {
          def codegen(generator, terminate=false, parenthesize=false)
            value.codegen(generator, terminate, parenthesize)
          end
        }
        / evaluation
      end

      # Infix operator evaluations
      rule evaluation
        "(" space? evaluation space? ")"
        {
          def codegen(generator, terminate=false, parenthesize=false)
            evaluation.codegen(generator, terminate, true)
          end
        }
        / comparison / equation
      end

      # A portion of an evaluation or expression that evaluates to a value (or null)
      # Note: Method calls apply, but only inline method calls as multiline method calls cannot
      # be part of an expression.
      rule value
        "(" space? value space? ")"
        {
          def codegen(generator, terminate=false, parenthesize=false)
            value.codegen(generator, terminate, true)
          end
        }
        / inline_call / varprop / object / method
      end

      # Core object types
      rule object
        number / string / list / boolean
      end

      # Numeric evaluations
      rule numeric
        equation / varprop / number
      end

      # Variables and properties
      rule varprop
        var / property / list_item
      end

      rule comparison
        value space? !keyword compareop space? expression <Comparison>
      end

      rule equation
        value space? !keyword mathop space? expression <Equation>
      end

      # All infix operators
      rule operator
        mathop / compareop
      end

      rule mathop
        [\+\-\/\*]
      end

      rule compareop
        "=" / "≥" / ">" / "<" / "≤" / "≠" / "and" / "or"
      end

      rule assignment
        "set" space first_var:varprop remaining_vars:(space? "," space? varprop)* space "to" space expression <Assignment>
        {
          def vars
            [first_var] + remaining_vars.elements.map{|e| e.varprop}
          end
        }
      end

      rule keyword
        "set" / "end" / "function" / "repeat" / "with" / "as" / "to" / "on" / "uses" /
          "times" / "if" / "else" / "while" / "and" / "or" / "true" / "false" / "nothing" /
          "item" / "of" / "tell"
      end

      rule identifier
        # This can be generated the same as a variable if need be
        !(keyword (space / newline)) [a-zA-Z] [\w]* "?"? <Variable>
        {
          def identifier
            text_value
          end
        }
      end

      rule var
        # Checking for "of" eliminates ambiguity between a variable
        # and a property of an object
        identifier !(space "of") <Variable>
      end

      rule comment
        '#' (!newline .)* <Comment>
      end

      rule space
        [ \t]+
      end

      rule newline
        space? [\r\n]+ space?
      end
    end

  end
end
