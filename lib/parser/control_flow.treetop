# Copyright (c) 2010-2011 Sean Voisen.

# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# THE SOFTWARE.

module Crayon
  module Parser

    grammar ControlFlow
      rule loop
        "repeat" space "while" space condition:expression newline
          body:(statement newline)*
        "end" <WhileLoop>
        {
          def statements
            body.elements.map {|s| s.statement}
          end
        } /
        "repeat" space i_end:numeric space "times" counter:(space "with" space varprop)? newline
          body:(statement newline)*
        "end" <CountLoop>
        {
          def statements
            body.elements.map {|s| s.statement}
          end
        } /
        "repeat" space varprop space "from" space i_start:numeric space "to" space i_end:numeric newline
          body:(statement newline)*
        "end" <CountLoop>
        {
          def statement
            body.elements.map {|s| s.statement}
          end
        }
      end

      rule conditional
        iff / unles
      end

      rule iff
        "if" space condition:expression newline
          body:(statement newline)*
          elseif:elseif?
          els:else?
        "end" <If>
        {
          def statements
            body.elements.map {|s| s.statement}
          end
        } /
        inline_statement space "if" space condition:expression <InlineIf>
      end

      rule elseif
        "else" space "if" space condition:expression newline
          body:(statement newline)*
         elseif:elseif? <ElseIf>
        {
          def statements
            body.elements.map {|s| s.statement}
          end
        }
      end

      rule else
        "else" newline
          body:(statement newline)* <Else>
        {
          def statements
            body.elements.map {|s| s.statement}
          end
        }
      end

      rule unles
        "unless" space condition:expression newline
          body:(statement newline)*
        "end" <Unless>
        {
          def statements
            body.elements.map {|s| s.statement}
          end
        } /
        inline_statement space "unless" space condition:expression <InlineUnless>
      end
    end

  end
end
