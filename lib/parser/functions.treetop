# Copyright (c) 2010-2011 Sean Voisen.

# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# THE SOFTWARE.

module Crayon
  module Parser

    grammar Functions
      rule call
        function:identifier space arglist <Call>
        / function:identifier "!" <Call>
      end

      rule inline_call
        function:identifier space inline_arglist <InlineCall>
        / function:identifier "!" <InlineCall>
      end

      rule arglist
        default_arg:(expression space)? "with" newline
          arg:argument newline
          remaining_args:(argument newline)*
        "end" <Arglist>
        {
          def args
            args = {arg.identifier => arg.expression}
            args.merge!({"__default" => default_arg.expression}) if defined? default_arg.expression
            remaining_args.elements.each {|e| args.merge!({e.argument.identifier => e.argument.expression})}
            args
          end
        } /
        inline_arglist
      end

      rule inline_arglist
        default_arg:(expression space)? "with" space arg:argument remaining_args:(space? "," space? arg:argument)* <Arglist>
        {
          def args
            args = {arg.identifier => arg.expression}
            args.merge!({"__default" => default_arg.expression}) if defined? default_arg.expression
            remaining_args.elements.each {|e| args.merge!({e.arg.identifier => e.arg.expression})}
            args
          end
        } /
        space? default_arg:expression <Arglist>
        {
          def args
            {"__default" => default_arg}
          end
        }
      end

      rule argument
        identifier space "as" space expression
      end

      rule function
        "function" space name:identifier space "uses" space arg:identifier remaining_args:(space? "," space? arg:identifier)* newline
          body:(statement newline)*
        "end" <Function>
        {
          def args
            [arg] + remaining_args.elements.map {|e| e.arg}
          end

          def statements
            body.elements.map {|s| s.statement}
          end
        } /
        "function" space name:identifier newline
          body:(statement newline)*
        "end" <Function>
        {
          def args
            []
          end

          def statements
            body.elements.map {|s| s.statement}
          end
        }
      end
    end

  end
end
